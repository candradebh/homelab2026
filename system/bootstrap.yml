- name: Bootstrapping the cluster
  hosts: localhost
  gather_facts: false

  vars:
    # Namespace, release e caminho do chart do ArgoCD
    argocd_ns: argocd
    argocd_release: argocd
    argocd_chart: ./argocd

  tasks:
    # 1) Garante que o namespace do ArgoCD exista (idempotente)
    - name: Ensure ArgoCD namespace exists
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ argocd_ns }}"
        state: present

    # 2) Detecta se é a primeira instalação (sem pods do Gitea rodando)
    #    Usado para escolher o values de "seed" vs "normal"
    - name: Detect if this is the first installation (no Gitea running)
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - app.kubernetes.io/instance=gitea
        field_selectors:
          - status.phase=Running
      register: first_install

    # Deixa explícito qual arquivo de values será usado (apenas clareza)
    - name: Decide which values file to use
      ansible.builtin.set_fact:
        argocd_values_file: >-
          {{ 'argocd/values-seed.yaml'
             if (first_install.resources | length == 0)
             else 'argocd/values.yaml' }}

    # 3) Renderiza o chart Helm do ArgoCD em manifests (inclui CRDs)
    - name: Render ArgoCD Helm chart into raw manifests (includes CRDs)
      kubernetes.core.helm_template:
        chart_ref: "{{ argocd_chart }}"
        include_crds: true
        release_name: "{{ argocd_release }}"
        release_namespace: "{{ argocd_ns }}"
        dependency_update: true
        values_files:
          - "{{ argocd_values_file }}"
      register: argocd_manifests

    # 4) Aguarda o CRD ApplicationSet ficar disponível/Established
    #    (importante para o apply subsequente funcionar sem corrida)
    - name: Wait for CRD applicationsets.argoproj.io to be Established
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: applicationsets.argoproj.io
      register: crd_apps
      until: crd_apps.resources | length > 0 and
        (crd_apps.resources.0.status.conditions
        | selectattr('type','equalto','Established')
        | selectattr('status','equalto','True') | list | length) > 0
      retries: 30
      delay: 4

    # 5) Aplica TODOS os manifests renderizados via Server-Side Apply (SSA)
    #    O field_manager ajuda a distinguir as mudanças feitas pelo ArgoCD.
    - name: Apply rendered ArgoCD manifests (server-side apply)
      kubernetes.core.k8s:
        resource_definition: "{{ argocd_manifests.stdout }}"
        apply: true
        server_side_apply:
          field_manager: argocd-controller
